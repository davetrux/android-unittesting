// "gradlew test" - runs robolectric unit tests
// "gradlew jacocoCoverageReport" - runs Jacoco coverage report

// Robolectric Test Report: ../robolectricTests/build/reports/tests/index.html
// Jacoco Coverage Report:  ../robolectricTests/build/reports/jacoco/jacocoCoverageReport/html/index.html

evaluationDependsOn(':app')

apply plugin: 'java'
apply plugin: 'jacoco'

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral();
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoCoverageReport(type:JacocoReport, dependsOn: "test") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../robolectricTests/build/jacoco/test.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

dependencies {
    def androidModule = project(':app')
    compile androidModule

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile androidModule.android.applicationVariants.toList().first().javaCompile.classpath
    compile androidModule.android.applicationVariants.toList().first().javaCompile.outputs.files
    compile files(androidModule.plugins.findPlugin("com.android.application").getBootClasspath())

    compile 'junit:junit:4.11'

    compile('org.robolectric:robolectric:2.4') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
    }
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class" // whatever Ant pattern matches your test class files
}